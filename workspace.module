<?php

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\workspace\Pointer;

/**
 * Implements hook_entity_type_alter().
 *
 * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
 */
function workspace_entity_type_alter(array &$entity_types) {
  \Drupal::service('workspace.entity_type_alter')->entityTypeAlter($entity_types);
}

/**
 * Implements hook_ENTITY_TYPE_insert()
 *
 * @param \Drupal\multiversion\Entity\WorkspaceInterface $workspace
 */
function workspace_workspace_insert(\Drupal\multiversion\Entity\WorkspaceInterface $workspace) {
  /** @var $pointer \Drupal\workspace\PointerInterface */
  $pointer = new Pointer('workspace:' . $workspace->id(), $workspace->label(), ['workspace' => $workspace->id()]);
  \Drupal::service('workspace.pointer')->add($pointer);
}

function workspace_pointer_allowed_values(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, &$cacheable) {
  return \Drupal\workspace\Entity\Replication::getPointerAllowedValues($definition, $entity, $cacheable);
}

/**
 * Implements hook_toolbar().
 */
function workspace_toolbar() {
  return \Drupal::service('workspace.toolbar')->toolbar();
}

/**
 * Implements hook_local_tasks_alter().
 */
function workspace_ui_local_tasks_alter(&$local_tasks) {
  // Remove the revisions local task for node since we're defining our own.
  unset($local_tasks['entity.node.version_history']);
}

/**
 * Implements hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function workspace_theme($existing, $type, $theme, $path) {
  return [
    'workspace_add_list' => [
      'variables' => ['content' => NULL],
    ],
    'workspace_rev' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK
 */
function workspace_preprocess_workspace_add_list(&$variables) {
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $type) {
      $variables['types'][$type->id()]['label'] = $type->label();
      $options = array('query' => \Drupal::request()->query->all());
      $variables['types'][$type->id()]['url'] = \Drupal::url('entity.workspace.add_form', array('workspace_type' => $type->id()), $options);
    }
  }
}

/**
 * Prepares variables for Multiversion revision templates.
 */
function workspace_preprocess_multiversion_rev(&$variables) {
  $uuid = $variables['elements']['#uuid'];
  $rev = $variables['elements']['#rev'];
  $rev_info = array_merge(
    \Drupal::service('entity.index.rev')->get("$uuid:$rev"),
    $variables['elements']['#rev_info']
  );

  $variables = array_merge($variables, $rev_info);

  list($i) = explode('-', $rev);
  // Apart from the index length, we want 7 characters plus dash and ellipsis.
  $length = strlen($i) + 9;
  $title = Unicode::truncate($rev, $length, FALSE, TRUE);

  if (!empty($rev_info['revision_id'])) {
    $entity_revision = \Drupal::entityManager()->getStorage($rev_info['entity_type_id'])->loadRevision($rev_info['revision_id']);
    $variables['title'] = \Drupal::l($title, $entity_revision->urlInfo('revision'));
  }
  else {
    $variables['title'] = $title;
  }
}
