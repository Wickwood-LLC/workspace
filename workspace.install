<?php

/**
 * @file
 * Install, update and uninstall functions for the workspace module.
 */

use Drupal\Component\Utility\Crypt;
use Drupal\multiversion\Entity\Workspace;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\workspace\Entity\Replication;

/**
 * Implementation of hook_install().
 */
function workspace_install() {
  // Set workspace earlier to alter entities before anyone else does.
  module_set_weight('workspace', 10);

  // Populate the replication blocker key state variable.
  $replication_blocker_key = Crypt::randomBytesBase64(55);
  \Drupal::state()->set('workspace.replication_blocker_key', $replication_blocker_key);

  // Add pointers for all existing workspaces.
  foreach (Workspace::loadMultiple() as $workspace) {
    \Drupal::service('workspace.entity_operations')->workspaceInsert($workspace);
  }

  $default_workspace_id = \Drupal::getContainer()->getParameter('workspace.default');
  /** @var \Drupal\multiversion\Entity\WorkspaceInterface $stage */
  $stage = Workspace::create(['machine_name' => 'stage', 'label' => 'Stage', 'type' => 'basic']);
  $stage->set('upstream', $default_workspace_id);
  $stage->save();

  // Allow workspace entity route alterations.
  \Drupal::service('entity_type.manager')->clearCachedDefinitions();
  \Drupal::service('router.builder')->rebuild();
}

/**
 * Allow "administer deployment" roles access to the Toolbar Update button.
 */
function workspace_update_8101() {
  if (\Drupal::moduleHandler()->moduleExists('deploy')) {
    $roles = \Drupal::entityTypeManager()
      ->getStorage('user_role')
      ->loadMultiple();
    foreach ($roles as $role) {
      if ($role->hasPermission('administer deployments')) {
        $role->grantPermission('update any workspace from upstream');
        $role->save();
      }
    }
  }
}

/**
 * Make sure all workspaces have a pointer.
 */
function workspace_update_8102() {
  $workspaces = \Drupal::entityTypeManager()->getStorage('workspace')->loadMultiple();
  $storage = \Drupal::entityTypeManager()->getStorage('workspace_pointer');
  foreach ($workspaces as $workspace) {
    $workspace_pointers = $storage->loadByProperties(['workspace_pointer' => $workspace->id()]);
    if (empty($workspace_pointers)) {
      /** @var \Drupal\workspace\WorkspacePointerInterface $pointer */
      $pointer = $storage->create();
      $pointer->setWorkspace($workspace);
      $pointer->save();
    }
  }
}

/**
 * Add the replication_status.
 */
function workspace_update_8103() {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  // Add the replication status field to the replication entity type.
  $replication_status = BaseFieldDefinition::create('boolean')
    ->setLabel(new TranslatableMarkup('Replication status'))
    ->setDescription(new TranslatableMarkup('The status of the replication.'))
    ->setRequired(TRUE)
    ->setDefaultValue(Replication::FAILED)
    ->setInitialValue(Replication::FAILED);
  $definition_update_manager->installFieldStorageDefinition('replication_status', 'replication', 'workspace', $replication_status);

  // Set the replication_status.
  $entity_type = $definition_update_manager->getEntityType('replication');
  \Drupal::database()->update($entity_type->getBaseTable())
    ->fields(['replication_status' => Replication::REPLICATED])
    ->isNotNull('replicated')
    ->execute();
}

/**
 * Populate the replication blocker key state variable.
 */
function workspace_update_8104() {
  $state = \Drupal::state();
  $replication_blocker_key = $state->get('workspace.replication_blocker_key');
  if (!$replication_blocker_key) {
    $replication_blocker_key = Crypt::randomBytesBase64(55);
    $state->set('workspace.replication_blocker_key', $replication_blocker_key);
  }
}

/**
 * Update workspace pointer name field.
 */
function workspace_update_8105() {
  $database = \Drupal::database();
  $database->query('ALTER TABLE workspace_pointer MODIFY name varchar(255);')->execute();
  $database->query('ALTER TABLE workspace_pointer_revision MODIFY name varchar(255);')->execute();
}
